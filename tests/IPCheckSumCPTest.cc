#include <algorithm>
#include <array>
#include <cstddef>
#include <cstdint>

#include <IPv4.hh>
#include <ranges>
#include <span>


constexpr auto IPv4PacketData = [](){
    uint8_t data[]{
        // IHL = 5
        // TOS = {Routine, Normal Delay, Normal Throughput, Normal Relibility}
        // Total length = 0x1DF (dec 479)
        0x45, 0x00, 0x01, 0xDF,

        // Identification = 0xD4ED (dec 54509)
        // Flags = {Reserved = 0, Dont fragment, Last Fragment
        // Fragment Offset = 0b0000000000000
        0xD4, 0xED, 0x40, 0x00,

        // TTL = 0x39 (dec 57)
        // Protocol = 0x6 (RFC790: "TCP")
        // Header Checksum = 0x36A0 (dec 13984)
        0x39, 0x06, 0x36, 0xA0,

        // SRC 162.159.87.234 (Cloudflare)
        0xA2, 0x9F, 0x87, 0xEA,
        // DST 10.0.0.2
        0x0A, 0x00, 0x00, 0x02,

        0x01, 0xBB, 0xE0, 0x8A,
        0x4A, 0x73, 0x51, 0x55, 0xA4, 0x31, 0x7F, 0xC7,
        0x50, 0x18, 0x00, 0x08, 0x49, 0x35, 0x00, 0x00,
        0x17, 0x03, 0x03, 0x01, 0xB2, 0x15, 0x2F, 0x2E,
        0xD8, 0xBA, 0x0C, 0xC0, 0x84, 0x46, 0x5B, 0x8B,
        0x9F, 0x42, 0xE9, 0x54, 0x46, 0xF0, 0x8B, 0xCC,
        0x7A, 0x38, 0x80, 0x15, 0xB3, 0x99, 0x14, 0x3B,
        0x17, 0x02, 0x5A, 0x24, 0x8F, 0xF4, 0xCF, 0x2F,
        0xDD, 0xCB, 0xA6, 0x64, 0x9A, 0xC0, 0x45, 0xE0,
        0x11, 0x7C, 0x9D, 0x3B, 0x3D, 0x78, 0x00, 0x5E,
        0xED, 0xA0, 0xCF, 0x97, 0xD1, 0x4F, 0xC2, 0x39,
        0x43, 0xE3, 0xC8, 0x15, 0x66, 0x56, 0x3C, 0x0D,
        0x53, 0xC8, 0x4F, 0x93, 0x56, 0xC6, 0xCA, 0xB1,
        0x1F, 0x57, 0xF4, 0x11, 0xAF, 0x0C, 0x44, 0x72,
        0x6A, 0xB9, 0xC4, 0x60, 0xC1, 0x91, 0xD5, 0x4F,
        0x7D, 0xE9, 0x5D, 0xDB, 0xB7, 0xDB, 0xB8, 0xCB,
        0x03, 0x23, 0x1A, 0x5E, 0xB6, 0x14, 0x6C, 0x7A,
        0xAE, 0x5E, 0x7C, 0x2E, 0x8E, 0xEF, 0x3D, 0xA4,
        0xB6, 0x05, 0xAE, 0x4D, 0xB8, 0x45, 0x81, 0x7D,
        0xAC, 0x05, 0x95, 0x8F, 0x4C, 0x64, 0xA9, 0x1B,
        0x7B, 0x0E, 0xB5, 0x19, 0xBF, 0xEF, 0x39, 0x76,
        0x12, 0xD4, 0x08, 0xFC, 0x7D, 0x9B, 0xF8, 0xCB,
        0x8F, 0x3D, 0xD0, 0xBF, 0xA5, 0xB6, 0xC2, 0x34,
        0x3F, 0x66, 0x2F, 0x85, 0x44, 0xFC, 0xCC, 0x55,
        0x4D, 0x21, 0x0E, 0x5C, 0xDF, 0xD9, 0x60, 0x2C,
        0xB4, 0xC3, 0x5A, 0x4A, 0x87, 0x71, 0x8F, 0x4B,
        0xAA, 0xEA, 0xB1, 0xAB, 0x2D, 0x6F, 0xB5, 0x26,
        0x70, 0x38, 0x11, 0xEC, 0x47, 0x96, 0x70, 0x6C,
        0x5A, 0x82, 0xCF, 0x66, 0xF8, 0x4F, 0xA7, 0x84,
        0x12, 0x3D, 0xB6, 0x46, 0xE6, 0xA6, 0x60, 0x0C,
        0xDD, 0x90, 0x1E, 0x82, 0x26, 0x72, 0xCB, 0x5B,
        0x51, 0x2B, 0xB1, 0x3D, 0x7A, 0x9F, 0x4B, 0xEA,
        0xD5, 0x52, 0x56, 0x6E, 0xC3, 0x3C, 0xC3, 0x1E,
        0x73, 0x19, 0xB8, 0xDE, 0x4D, 0x69, 0x2F, 0x01,
        0xD3, 0xB4, 0x2F, 0x9C, 0x9D, 0xB1, 0x26, 0x6A,
        0x99, 0x47, 0x4A, 0xA6, 0x82, 0xFB, 0x91, 0x96,
        0x7B, 0x54, 0x48, 0x3E, 0x71, 0x2F, 0x31, 0x58,
        0x0B, 0xF6, 0xFC, 0x63, 0x70, 0x0B, 0x0F, 0x88,
        0xA3, 0x89, 0x30, 0xA1, 0x5B, 0x07, 0x21, 0x8A,
        0xFF, 0xDC, 0xA2, 0xB3, 0xB2, 0x2E, 0x71, 0x90,
        0xF8, 0x27, 0xF9, 0xD5, 0x19, 0xC6, 0x56, 0xD8,
        0xC6, 0x29, 0x76, 0x36, 0x6F, 0x00, 0xEC, 0x3A,
        0x2A, 0xF0, 0x0A, 0x8D, 0x0B, 0x89, 0x31, 0x96,
        0x6D, 0xCB, 0x6C, 0x2C, 0xA1, 0x52, 0xB3, 0x92,
        0x85, 0xC8, 0xF6, 0x7F, 0x37, 0x02, 0xC5, 0xC6,
        0x30, 0x88, 0xB2, 0x61, 0x31, 0x9C, 0xD5, 0x88,
        0x13, 0x14, 0x7F, 0x26, 0xDB, 0xE3, 0x44, 0x28,
        0x5B, 0x60, 0xAB, 0xC0, 0xB4, 0x20, 0x09, 0x35,
        0x59, 0x41, 0x48, 0xDC, 0xCD, 0x17, 0xDB, 0xBC,
        0x04, 0xE6, 0x59, 0x5F, 0xAD, 0x9B, 0x3C, 0xFD,
        0xFD, 0x9D, 0xE3, 0x59, 0xC9, 0x19, 0x99, 0xD9,
        0x8D, 0x27, 0x12, 0xE0, 0xDE, 0x68, 0x3F, 0xE6,
        0x61, 0x28, 0xD2, 0x16, 0x55, 0x65, 0x0D, 0xA8,
        0xD3, 0x58, 0xC3, 0x6F, 0xB2, 0x2D, 0xFB, 0x85,
        0x47, 0x6C, 0xE1, 0x93, 0xC8, 0xFD, 0x0B, 0xE9,
        0xF3, 0x91, 0x0C, 0x5F, 0x44, 0xDE, 0x76, 0x90,
        0x2D, 0xA2, 0x6E, 0x04, 0x5C, 0xA2, 0xC7, 0xBF,
        0x80, 0x45, 0x96, 0x53, 0x4B, 0xC4, 0xF5
    };

    std::array<std::byte, sizeof(data)> output{};

    std::ranges::copy(
        data | std::views::transform([](auto n) { return std::byte(n); }),
        std::begin(output));

    return output;
}();

constexpr IPv4::PacketView packet{std::span<const std::byte>(IPv4PacketData)};

static_assert(packet.is_valid());
